#!/bin/sh

function expect_log_in_output {
  if grep -q "$@" output.txt; then
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi
}

function expect_log_not_in_output {
  if grep -q "$@" output.txt; then
    printf "\x1B[31m!\x1B[39m"
  else
    printf "."
  fi
}

function expect_commit_in_history {
  if git log | grep -q $1; then
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi
}

function expect_commit_not_in_history {
  if git log | grep -q $1; then
    printf "\x1B[31m!\x1B[39m"
  else
    printf "."
  fi
}

function global_setup {
  CURRENT_TIME=`date +%y%m%d%H%M%S`
  CURRENT_DATE=`date +%y.%m.%d`

  echo "Setting up test repository..."

  TEST_REPO_NAME="git-build-test-repo-$CURRENT_TIME"
  mkdir /tmp/$TEST_REPO_NAME
  cd /tmp/$TEST_REPO_NAME
  git init --bare > /dev/null 2>&1

  echo "Setting up test environment..."

  TEST_ENV_NAME="git-build-test-env-$CURRENT_TIME"
  mkdir /tmp/$TEST_ENV_NAME
  cd /tmp/$TEST_ENV_NAME
  git clone /tmp/$TEST_REPO_NAME > /dev/null 2>&1
  cd /tmp/$TEST_ENV_NAME/$TEST_REPO_NAME

  echo "Setting up test branches..."

  echo "master" >> branches.txt
  (git add branches.txt &&git commit -m "Initial commit for master branch" && git push origin master) > /dev/null 2>&1
  MASTER_COMMIT=`git show HEAD | grep -m 1 commit | awk '{ print $2 }'`

  (git checkout -b develop) > /dev/null 2>&1
  echo "develop" >> branches.txt
  (git commit -a -m "Initial commit for develop branch" && git push origin develop) > /dev/null 2>&1
  DEVELOP_COMMIT=`git show HEAD | grep -m 1 commit | awk '{ print $2 }'`

  echo ""
}

function global_teardown {
  echo ""
  cd /tmp

  echo "Tearing down test environment..."
  rm -Rf "/tmp/$TEST_ENV_NAME"

  echo "Tearing down test repository..."
  rm -Rf "/tmp/$TEST_REPO_NAME"
}

function local_setup_branch {
  BRANCH_TEST="$1/$CURRENT_DATE"
  (git checkout $2 && git checkout -b $BRANCH_TEST) > /dev/null 2>&1
  echo "$BRANCH_TEST" >> branches.txt
  (git commit -a -m "Initial commit for $1 branch" && git push origin $BRANCH_TEST) > /dev/null 2>&1
  BRANCH_COMMIT=`git show HEAD | grep -m 1 commit | awk '{ print $2 }'`
}

function local_setup_hotfix {
  BRANCH_HOTFIX="hotfix/$CURRENT_DATE"
  (git checkout master && git checkout -b $BRANCH_HOTFIX && git push origin $BRANCH_HOTFIX) > /dev/null 2>&1
}

function local_setup_integration_from {
  BRANCH_INTEGRATION="integration/$CURRENT_DATE"
  (git checkout $1 && git checkout -b $BRANCH_INTEGRATION && git push origin $BRANCH_INTEGRATION) > /dev/null 2>&1
}

function local_setup_release {
  BRANCH_RELEASE="release/$CURRENT_DATE.0"
  (git checkout develop && git checkout -b $BRANCH_RELEASE && git push origin $BRANCH_RELEASE) > /dev/null 2>&1
}

function local_teardown_branch {
  (git checkout master; git branch -D $1; git push origin :$1) > /dev/null 2>&1

  if [ "$1" = "$BRANCH_TEST" ]; then
    BRANCH_TEST=""
    BRANCH_COMMIT=""
  fi
}

function local_teardown_hotfix {
  local_teardown_branch $BRANCH_HOTFIX
  BRANCH_HOTFIX=""
}

function local_teardown_integration {
  local_teardown_branch $BRANCH_INTEGRATION
  BRANCH_INTEGRATION=""
}

function local_teardown_release {
  local_teardown_branch $BRANCH_RELEASE
  BRANCH_RELEASE=""
}

function silent_git_build {
  eval "> output.txt && git-build $@ -o output.txt > /dev/null"
}

function test_add_to_integration_from_develop {
  printf "  integration (from develop)"
  local_setup_integration_from "develop"
  local_setup_branch "feature" "develop"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a add-to -t integration -b $BRANCH_INTEGRATION -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"

  git checkout $BRANCH_TEST > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT
  expect_commit_in_history $BRANCH_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration
  echo ""
}

function test_add_to_integration_from_master {
  printf "  integration (from master)"
  local_setup_integration_from "master"
  local_setup_branch "bugfix" "master"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a add-to -t integration -b $BRANCH_INTEGRATION -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"

  git checkout $BRANCH_TEST > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT
  expect_commit_in_history $BRANCH_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration
  echo ""
}

function test_branch_does_not_exist {
  local_setup_branch "feature" "develop"

  echo $BRANCH_TEST > input.txt
  silent_git_build "-a $ACTION -t $BUILD_TYPE -b $1 -i input.txt -f develop"
  expect_log_in_output "\[ERROR\] git-build> # Branch $1 does not exist"

  local_teardown_branch $BRANCH_TEST
}

function test_branch_exists {
  (git branch $1 && git push origin $1) > /dev/null 2>&1
  local_setup_branch "feature" "develop"

  echo $BRANCH_TEST > input.txt
  silent_git_build "-a $ACTION -t $BUILD_TYPE -b $1 -i input.txt -f develop"
  expect_log_in_output "\[ERROR\] git-build> # Branch $1 already exists"

  local_teardown_branch $BRANCH_TEST
  (git branch -D $1 && git push origin :$1) > /dev/null 2>&1
}

function test_finish_bugfix {
  printf "  bugfix"
  local_setup_hotfix
  local_setup_branch "bugfix" "master"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a finish -t bugfix -b $BRANCH_HOTFIX -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_HOTFIX"

  git checkout $BRANCH_HOTFIX > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT
  expect_commit_in_history $BRANCH_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_hotfix
  echo ""
}

function test_finish_feature {
  printf "  feature"
  local_setup_branch "feature" "develop"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a finish -t feature -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to develop"

  git checkout develop > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT
  expect_commit_in_history $BRANCH_COMMIT

  local_teardown_branch $BRANCH_TEST
  echo ""
}

function test_finish_hotfix {
  printf "  hotfix"
  local_setup_hotfix

  silent_git_build "-a finish -t hotfix -b $BRANCH_HOTFIX"

  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_HOTFIX to master" output.txt; then
    (git checkout master && git reset --hard $MASTER_COMMIT && git push --force origin master) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_HOTFIX to develop" output.txt; then
    (git checkout develop && git reset --hard $DEVELOP_COMMIT && git push --force origin develop) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  local_teardown_hotfix
  echo ""
}

function test_finish_patch_for_hotfix {
  printf "  patch (for hotfix)"
  local_setup_hotfix
  local_setup_branch "patch" $BRANCH_HOTFIX

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a finish -t patch -b $BRANCH_HOTFIX -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_HOTFIX"

  git checkout $BRANCH_HOTFIX > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT
  expect_commit_in_history $BRANCH_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_hotfix
  echo ""
}

function test_finish_patch_for_release {
  printf "  patch (for release)"
  local_setup_release
  local_setup_branch "patch" $BRANCH_RELEASE

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a finish -t patch -b $BRANCH_RELEASE -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_RELEASE"

  git checkout $BRANCH_RELEASE > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT
  expect_commit_in_history $BRANCH_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_release
  echo ""
}

function test_finish_release {
  printf "  release"
  local_setup_release

  silent_git_build "-a finish -t release -b $BRANCH_RELEASE"

  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_RELEASE to master" output.txt; then
    (git checkout master && git reset --hard $MASTER_COMMIT && git push --force origin master) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_RELEASE to develop" output.txt; then
    (git checkout develop && git reset --hard $DEVELOP_COMMIT && git push --force origin develop) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  local_teardown_release
  echo ""
}

function test_invalid_branch_and_version {
  local branch="$1"
  local version="$2"

  if [ -n "$branch" ]; then
    silent_git_build "-a $ACTION -t $BUILD_TYPE -b $branch -i input.txt -f develop"
    expect_log_in_output "\[ERROR\] git-build> # Invalid branch or version $branch"
  fi

  if [ -n "$version" ]; then
    silent_git_build "-a $ACTION -t $BUILD_TYPE -v $version -i input.txt -f develop"
    expect_log_in_output "\[ERROR\] git-build> # Invalid branch or version $version"
  fi
}

function test_invalid_build_types {
  silent_git_build "-a $ACTION"
  expect_log_in_output "\[ERROR\] git-build> # Type not found"

  local build_type

  for build_type in $@; do
    silent_git_build "-a $ACTION -t $build_type"
    expect_log_in_output "\[ERROR\] git-build> # Cannot $ACTION build $build_type"
  done
}

function test_invalid_input_branches {
  > input.txt
  silent_git_build "-a $ACTION -t $BUILD_TYPE -f develop -i input.txt -v $VERSION"
  expect_log_in_output "\[ERROR\] git-build> # Input branch(es) not found"

  echo "placeholder" > input.txt
  silent_git_build "-a $ACTION -t $BUILD_TYPE -f develop -i input.txt -v $VERSION"
  expect_log_in_output "\[ERROR\] git-build> # Branch placeholder does not exist"
}

function test_invalid_parent_branch {
  silent_git_build "-a $ACTION -t $BUILD_TYPE -b integration"
  expect_log_in_output "\[ERROR\] git-build> # Parent branch not found"

  silent_git_build "-a $ACTION -t $BUILD_TYPE -b integration -f invalid"
  expect_log_in_output "\[ERROR\] git-build> # Cannot branch from parent branch invalid"
}

function test_missing_branch_and_version {
  silent_git_build "-a $ACTION -t $BUILD_TYPE -i input.txt -f develop"
  expect_log_in_output "\[ERROR\] git-build> # Branch or version not found"
}

function test_validations {
  printf "Testing validations"

  silent_git_build
  expect_log_in_output "\[ERROR\] git-build> # Action not found"

  silent_git_build "-a invalid"
  expect_log_in_output "\[ERROR\] git-build> # Invalid action invalid"

  echo ""
}

function test_validations_for_add_to {
  ACTION="add-to"
  VERSION="1.0"

  printf "  for $ACTION"
  > input.txt

  test_invalid_build_types "bugfix develop feature hotfix invalid patch production release"
  test_valid_build_types "integration"

  BUILD_TYPE="integration"

  test_missing_branch_and_version
  test_invalid_branch_and_version
  test_invalid_input_branches
  test_branch_does_not_exist "integration/invalid.0"

  echo ""
}

function test_validations_for_deploy {
  ACTION="deploy"
  VERSION="1.0"

  printf "  for $ACTION"
  > input.txt

  test_invalid_build_types "bugfix feature invalid patch"
  # test_valid_build_types "develop hotfix integration production release"
  # Yeah... let's NOT do this ;)

  BUILD_TYPE="hotfix"
  test_missing_branch_and_version
  test_invalid_branch_and_version "hotfix/1.0" "1.0"
  test_branch_does_not_exist "hotfix/invalid.1"

  BUILD_TYPE="integration"
  test_invalid_parent_branch
  test_missing_branch_and_version
  test_invalid_branch_and_version
  test_branch_does_not_exist "integration/invalid.0"

  BUILD_TYPE="release"
  test_invalid_branch_and_version "release/1.1" "1.1"
  test_branch_does_not_exist "release/invalid.0"

  echo ""
}

function test_validations_for_finish {
  ACTION="finish"
  VERSION="1.0"

  printf "  for $ACTION"
  > input.txt

  test_invalid_build_types "develop integration invalid production"
  test_valid_build_types "bugfix feature hotfix patch release"

  BUILD_TYPE="bugfix"
  VERSION="1.1"
  test_invalid_input_branches
  test_invalid_branch_and_version "hotfix/1.0" "1.0"
  test_branch_does_not_exist "hotfix/invalid.1"

  BUILD_TYPE="feature"
  test_invalid_input_branches

  BUILD_TYPE="hotfix"
  test_invalid_branch_and_version "hotfix/1.0" "1.0"
  test_branch_does_not_exist "hotfix/invalid.1"

  BUILD_TYPE="patch"
  VERSION="1.0"
  test_invalid_input_branches
  test_branch_does_not_exist "release/invalid.0"

  BUILD_TYPE="release"
  test_invalid_branch_and_version "release/1.1" "1.1"
  test_branch_does_not_exist "release/invalid.0"

  echo ""
}

function test_validations_for_start {
  ACTION="start"
  VERSION="1.0"

  printf "  for $ACTION"
  > input.txt

  test_invalid_build_types "bugfix develop feature invalid patch production"
  test_valid_build_types "hotfix integration release"

  BUILD_TYPE="hotfix"
  test_missing_branch_and_version
  test_invalid_branch_and_version "hotfix/1.0" "1.0"
  VERSION="1.1"
  test_invalid_input_branches
  test_branch_exists "hotfix/1.1"

  BUILD_TYPE="integration"
  test_invalid_parent_branch
  test_invalid_input_branches
  test_branch_exists "integration/1.0"

  BUILD_TYPE="release"
  test_invalid_branch_and_version "release/1.1" "1.1"
  VERSION="1.0"
  test_branch_exists "release/1.0"

  echo ""
}

function test_start_hotfix {
  printf "  hotfix"
  local_setup_branch "bugfix" "master"
  BRANCH_HOTFIX="hotfix/3.2.1"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a start -t hotfix -b $BRANCH_HOTFIX -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_HOTFIX"

  git checkout $BRANCH_HOTFIX > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_hotfix
  local_teardown_branch $BRANCH_TEST
  echo ""
}

function test_start_integration_from_develop {
  printf "  integration (from develop)"
  local_setup_branch "feature" "develop"
  BRANCH_INTEGRATION="integration/3.2.1"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a start -t integration -b $BRANCH_INTEGRATION -f develop -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"

  git checkout $BRANCH_INTEGRATION > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration
  echo ""
}

function test_start_integration_from_master {
  printf "  integration (from master)"
  local_setup_branch "bugfix" "master"
  BRANCH_INTEGRATION="integration/3.2.1"

  echo "$BRANCH_TEST" > input.txt
  silent_git_build "-a start -t integration -b $BRANCH_INTEGRATION -f master -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"

  git checkout $BRANCH_INTEGRATION > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration
  echo ""
}

function test_start_release {
  printf "  release"
  local_setup_branch "feature" "develop"
  BRANCH_RELEASE="release/3.2.0"

  silent_git_build "-a start -t release -b $BRANCH_RELEASE -i input.txt"
  expect_log_in_output "\[INFO \] git-build> # Successfully created $BRANCH_RELEASE from develop"

  git checkout $BRANCH_RELEASE > /dev/null 2>&1
  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_release
  local_teardown_branch $BRANCH_TEST
  echo ""
}

function test_valid_build_types {
  local build_type

  for build_type in $@; do
    silent_git_build "-a $ACTION -t $build_type -i input.txt"
    expect_log_not_in_output "\[ERROR\] git-build> # Cannot $ACTION build $build_type"
  done
}

global_setup

test_validations
test_validations_for_add_to
test_validations_for_deploy
test_validations_for_finish
test_validations_for_start

echo "Testing add-to"
test_add_to_integration_from_master
test_add_to_integration_from_develop

echo "Testing finish"
test_finish_bugfix
test_finish_feature
test_finish_hotfix
test_finish_patch_for_hotfix
test_finish_patch_for_release
test_finish_release

echo "Testing start"
test_start_hotfix
test_start_integration_from_master
test_start_integration_from_develop
test_start_release

global_teardown

echo "Done!"
