#!/bin/sh

function eval_and_grep {
  if eval "$ARGS_EVAL" | grep -q "$ARGS_GREP"; then
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi
}

function expect_commit_in_history {
  if git log | grep -q $1; then
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi
}

function expect_commit_not_in_history {
  if git log | grep -q $1; then
    printf "\x1B[31m!\x1B[39m"
  else
    printf "."
  fi
}

function global_setup {
  TIMESTAMP=`date +%y%m%d%H%M%S`
  VERSION=`date +%y.%m.%d`

  echo "Setting up test repository..."

  TEST_REPO_NAME="git-build-test-repo-$TIMESTAMP"
  mkdir /tmp/$TEST_REPO_NAME
  cd /tmp/$TEST_REPO_NAME
  git init --bare > /dev/null 2>&1

  echo "Setting up test environment..."

  TEST_ENV_NAME="git-build-test-env-$TIMESTAMP"
  mkdir /tmp/$TEST_ENV_NAME
  cd /tmp/$TEST_ENV_NAME
  git clone /tmp/$TEST_REPO_NAME > /dev/null 2>&1
  cd /tmp/$TEST_ENV_NAME/$TEST_REPO_NAME

  echo "Setting up test branches..."

  echo "master" >> branches.txt
  (git add branches.txt &&git commit -m "Initial commit for master branch" && git push origin master) > /dev/null 2>&1
  MASTER_COMMIT=`git show HEAD | grep -m 1 commit | awk '{ print $2 }'`

  (git checkout -b develop) > /dev/null 2>&1
  echo "develop" >> branches.txt
  (git commit -a -m "Initial commit for develop branch" && git push origin develop) > /dev/null 2>&1
  DEVELOP_COMMIT=`git show HEAD | grep -m 1 commit | awk '{ print $2 }'`

  echo ""
}

function global_teardown {
  echo ""
  cd /tmp

  echo "Tearing down test environment..."
  rm -Rf "/tmp/$TEST_ENV_NAME"

  echo "Tearing down test repository..."
  rm -Rf "/tmp/$TEST_REPO_NAME"

  echo "OK!"
}

function local_setup_branch {
  BRANCH_TEST="$1/$VERSION"
  (git checkout $2 && git checkout -b $BRANCH_TEST) > /dev/null 2>&1
  echo "$BRANCH_TEST" >> branches.txt
  (git commit -a -m "Initial commit for $1 branch" && git push origin $BRANCH_TEST) > /dev/null 2>&1
}

function local_setup_hotfix {
  BRANCH_HOTFIX="hotfix/$VERSION"
  (git checkout master && git checkout -b $BRANCH_HOTFIX && git push origin $BRANCH_HOTFIX) > /dev/null 2>&1
}

function local_setup_integration_from {
  BRANCH_INTEGRATION="integration/$VERSION"
  (git checkout $1 && git checkout -b $BRANCH_INTEGRATION && git push origin $BRANCH_INTEGRATION) > /dev/null 2>&1
}

function local_setup_release {
  BRANCH_RELEASE="release/$VERSION"
  (git checkout develop && git checkout -b $BRANCH_RELEASE && git push origin $BRANCH_RELEASE) > /dev/null 2>&1
}

function local_teardown_branch {
  (git checkout master && git branch -D $1 && git push origin :$1) > /dev/null 2>&1

  if [ "$1" = "$BRANCH_TEST" ]; then
    BRANCH_TEST=""
  fi
}

function local_teardown_hotfix {
  local_teardown_branch $BRANCH_HOTFIX
  BRANCH_HOTFIX=""
}

function local_teardown_integration {
  local_teardown_branch $BRANCH_INTEGRATION
  BRANCH_INTEGRATION=""
}

function local_teardown_release {
  local_teardown_branch $BRANCH_RELEASE
  BRANCH_RELEASE=""
}

function test_add_to {
  printf "Testing add-to"

  local_setup_integration_from "master"
  local_setup_branch "bugfix" "master"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a add-to -t integration -b $BRANCH_INTEGRATION -i input.txt -o output.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration

  local_setup_integration_from "develop"
  local_setup_branch "feature" "develop"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a add-to -t integration -b $BRANCH_INTEGRATION -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration

  echo "OK"
}

function test_finish {
  printf "Testing finish"

  # finish bugfix
  local_setup_hotfix
  local_setup_branch "bugfix" "master"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a finish -t bugfix -b $BRANCH_HOTFIX -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_HOTFIX"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_hotfix

  # finish feature
  local_setup_branch "feature" "develop"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a finish -t feature -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to develop"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST

  # finish hotfix
  local_setup_hotfix

  git-build -a finish -t hotfix -b $BRANCH_HOTFIX -e test -o output.txt > /dev/null
  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_HOTFIX to master" output.txt; then
    (git checkout master && git reset --hard $MASTER_COMMIT && git push --force origin master) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_HOTFIX to develop" output.txt; then
    (git checkout develop && git reset --hard $DEVELOP_COMMIT && git push --force origin develop) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  local_teardown_hotfix

  # finish patch for hotfix
  local_setup_hotfix
  local_setup_branch "patch" $BRANCH_HOTFIX

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a finish -t patch -b $BRANCH_HOTFIX -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_HOTFIX"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_hotfix

  # finish patch for release
  local_setup_release
  local_setup_branch "patch" $BRANCH_RELEASE

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a finish -t patch -b $BRANCH_RELEASE -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_RELEASE"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_release

  # finish release
  local_setup_release

  git-build -a finish -t hotfix -b $BRANCH_RELEASE -e test -o output.txt > /dev/null
  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_RELEASE to master" output.txt; then
    (git checkout master && git reset --hard $MASTER_COMMIT && git push --force origin master) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  if grep -q "\[INFO \] git-build> # Successfully merged $BRANCH_RELEASE to develop" output.txt; then
    (git checkout develop && git reset --hard $DEVELOP_COMMIT && git push --force origin develop) > /dev/null 2>&1
    printf "."
  else
    printf "\x1B[31m!\x1B[39m"
  fi

  local_teardown_release

  echo "OK"
}

function test_offline_validations {
  printf "Testing offline validations"

  ARGS_EVAL="git-build"
  ARGS_GREP="\[ERROR\] git-build> Action not found"
  eval_and_grep

  ARGS_EVAL="git-build -a invalid"
  ARGS_GREP="\[ERROR\] git-build> Invalid action invalid"
  eval_and_grep

  ARGS_EVAL="git-build -a add-to"
  ARGS_GREP="\[ERROR\] git-build> Type not found"
  eval_and_grep

  ARGS_EVAL="git-build -a add-to -t invalid"
  ARGS_GREP="\[ERROR\] git-build> Cannot add-to build invalid"
  eval_and_grep

  ARGS_EVAL="git-build -a add-to -t integration"
  ARGS_GREP="\[ERROR\] git-build> Branch or version not found"
  eval_and_grep

  echo "" > input.txt
  ARGS_EVAL="git-build -a add-to -t integration -b 2.1.0 -i input.txt"
  ARGS_GREP="\[ERROR\] git-build> Input branch(es) not found"
  eval_and_grep

  echo "placeholder" > input.txt
  ARGS_EVAL="git-build -a add-to -t integration -b 2.1.0 -i input.txt"
  ARGS_GREP="\[ERROR\] git-build> Branch placeholder does not exist"
  eval_and_grep

  ARGS_EVAL="git-build -a deploy -t hotfix"
  ARGS_GREP="\[ERROR\] git-build> Environment not found"
  eval_and_grep

  ARGS_EVAL="git-build -a deploy -t hotfix -e invalid"
  ARGS_GREP="\[ERROR\] git-build> Invalid environment invalid"
  eval_and_grep

  ARGS_EVAL="git-build -a finish -t hotfix -v 1.0"
  ARGS_GREP="\[ERROR\] git-build> Invalid branch or version 1.0"
  eval_and_grep

  ARGS_EVAL="git-build -a finish -t release -v 1.1"
  ARGS_GREP="\[ERROR\] git-build> Invalid branch or version 1.1"
  eval_and_grep

  ARGS_EVAL="git-build -a finish -t release -v 1.1"
  ARGS_GREP="\[ERROR\] git-build> Invalid branch or version 1.1"
  eval_and_grep

  ARGS_EVAL="git-build -a start -t integration"
  ARGS_GREP="\[ERROR\] git-build> Parent branch not found"
  eval_and_grep

  ARGS_EVAL="git-build -a start -t integration -f invalid"
  ARGS_GREP="\[ERROR\] git-build> Cannot branch from parent branch invalid"
  eval_and_grep

  echo "OK"
}

function test_online_validations {
  printf "Testing online validations"

  ARGS_EVAL="git-build -a finish -t hotfix -b invalid"
  ARGS_GREP="\[ERROR\] git-build> Branch invalid does not exist"
  eval_and_grep

  echo "develop" > input.txt
  ARGS_EVAL="git-build -a start -t hotfix -b master -i input.txt"
  ARGS_GREP="\[ERROR\] git-build> Branch master already exists"
  eval_and_grep

  echo "OK"
}

function test_start {
  printf "Testing start"

  # start hotfix
  local_setup_branch "bugfix" "master"
  BRANCH_HOTFIX="hotfix/3.2.1"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a start -t hotfix -b $BRANCH_HOTFIX -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_HOTFIX"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_hotfix
  local_teardown_branch $BRANCH_TEST

  # start integration from master
  local_setup_branch "bugfix" "master"
  BRANCH_INTEGRATION="integration/3.2.1"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a start -t integration -b $BRANCH_INTEGRATION -f master -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_not_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration

  # start integration from develop
  local_setup_branch "feature" "develop"
  BRANCH_INTEGRATION="integration/3.2.1"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a start -t integration -b $BRANCH_INTEGRATION -f develop -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_INTEGRATION"
  eval_and_grep

  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_branch $BRANCH_TEST
  local_teardown_integration

  # start release
  local_setup_branch "feature" "develop"
  BRANCH_RELEASE="release/3.2.0"

  echo "$BRANCH_TEST" > input.txt
  ARGS_EVAL="git-build -a start -t release -b $BRANCH_RELEASE -i input.txt"
  ARGS_GREP="\[INFO \] git-build> # Successfully merged $BRANCH_TEST to $BRANCH_RELEASE"
  eval_and_grep


  expect_commit_in_history $MASTER_COMMIT
  expect_commit_in_history $DEVELOP_COMMIT

  local_teardown_release
  local_teardown_branch $BRANCH_TEST





  echo "OK"
}



global_setup
test_offline_validations
test_online_validations
test_add_to
test_finish
test_start
global_teardown