#!/bin/sh

APP_NAME="git-build"
APP_VERSION="v1.0.1"
COLOR_DEBUG=`printf "\x1B[0;90m"`
COLOR_DEFAULT=`printf "\x1B[0m"`
COLOR_RED=`printf "\x1B[0;91m"`
COLOR_PREFIX=`printf '\x1B'`
ENVIRONMENT_EY_PRODUCTION="indinero3_production"
ENVIRONMENT_EY_RELEASE="staging_v3"
ENVIRONMENT_EY_HOTFIX="" # TODO
INSTALLER_URL_CURL="https://curl.haxx.se/download.html"
INSTALLER_URL_GIT="https://git-scm.com/downloads/"
INSTALLER_URL_GEM="https://rubygems.org/pages/download/"
INSTALLER_URL_LARGA="http://172.30.50.113/larga"
INSTALLER_URL_VIM="http://www.vim.org/download.php"
LOG_FILE="/dev/null"
SLACK_WEBHOOK="https://hooks.slack.com/services/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"

function autogenerate_build_branch {
  case "$ACTION" in
    add-to)
      BUILD_BRANCH="$BUILD_TYPE/$VERSION"
      ;;
    deploy)
      case "$BUILD_TYPE" in
        develop)
          BUILD_BRANCH="develop"
          ;;
        production)
          BUILD_BRANCH="master"
          ;;
        release)
          # the UPCOMING release date INCLUDING current date
          local release_month=`date -v +Mon -v +7d -v +1m -v 1d -v -14d -v +Mon +%y.%-m`
          BUILD_BRANCH="release/$release_month.0"
          ;;
        *)
          BUILD_BRANCH="$BUILD_TYPE/$VERSION"
          ;;
      esac
      ;;
    finish)
      case "$BUILD_TYPE" in
        bugfix)
          BUILD_BRANCH="hotfix/$VERSION"
          ;;
        feature)
          BUILD_BRANCH="develop"
          ;;
        patch)
          if [[ "$VERSION" == *.0 ]]; then
            BUILD_BRANCH="release/$VERSION"
          else
            BUILD_BRANCH="hotfix/$VERSION"
          fi
          ;;
        release)
          # the MOST RECENT release date INCLUDING current date
          local release_month=`date -v -Mon -v +14d -v 1d -v -14d -v +Mon +%y.%-m`
          BUILD_BRANCH="release/$release_month.0"
          ;;
        *)
          BUILD_BRANCH="$BUILD_TYPE/$VERSION"
          ;;
      esac
      ;;
    start)
      case "$BUILD_TYPE" in
        integration)
          local current_time=`date +%y.%-m.%-d.%-H.%-M`
          BUILD_BRANCH="integration/$current_time"
          ;;
        release)
          # the UPCOMING release date EXCLUDING current date
          local release_month=`date -v +1d -v +Mon -v +7d -v +1m -v 1d -v -14d -v +Mon +%y.%-m`
          BUILD_BRANCH="release/$release_month.0"
          ;;
        *)
          BUILD_BRANCH="$BUILD_TYPE/$VERSION"
          ;;
      esac
      ;;
  esac
}

function checkout_branch {
  log_info "Checking out $1"
  (git branch -D $1; git checkout $1) > /dev/null 2>&1
}

function checkout_branches {
  log_info "Checking out required branches..."
  local branch

  case "$ACTION" in
    add-to)
      checkout_branch "$BUILD_BRANCH"
      for branch in $INPUT_BRANCHES; do
        checkout_branch $branch
      done
      ;;
    finish)
      case "$BUILD_TYPE" in
        bugfix|patch)
          checkout_branch "$BUILD_BRANCH"
          for branch in $INPUT_BRANCHES; do
            checkout_branch $branch
            execute "git log"
          done
          ;;
        feature)
          checkout_branch "develop"
          for branch in $INPUT_BRANCHES; do
            checkout_branch $branch
          done
          ;;
        hotfix|release)
          checkout_branch "develop"
          checkout_branch "master"
          checkout_branch "$BUILD_BRANCH"
          ;;
      esac
      ;;
    start)
      case "$BUILD_TYPE" in
        hotfix|integration)
          for branch in $INPUT_BRANCHES; do
            checkout_branch $branch
          done
          ;;
      esac
      ;;
  esac

  log_info ""
}

function cleanup_branches {
  log_info "Cleaning up merged branches..."

  local branch
  for branch in ${MERGED_BRANCHES[@]}; do
    git branch -D $branch > /dev/null 2>&1
  done

  log_info ""
}

function deploy_to_engineyard {
  execute_or_die "ey login"
  execute_or_die "ey deploy -e $1 -m 'rake db:migrate' -r $BUILD_BRANCH"
}

function deploy_to_larga {
  local subdomain="$1"
  local endpoint="$subdomain.indinerocorp.com"

  shift
  local pretty_name="$@"

  send_larga_deploy_message "#builds" "<!channel> Deployment to <https://$endpoint|$pretty_name> started..."

  local previous_branch=`larga -action show -branch placeholder | grep https://$endpoint | awk '{print $1}'`
  local deployment_action="build"

  if [ -n "$previous_branch" ]; then
    if [ "$previous_branch" = "$BUILD_BRANCH" ]; then
      deployment_action="deploy"
    else
      log_info "Destroying current staging instance $previous_branch..."
      execute_or_die "larga -action destroy -branch $previous_branch"
    fi
  fi

  local bundle_command

  local remote_command="cd /home/deploy/indinero/current; RAILS_ENV=staging /home/deploy/.rbenv/shims/bundle exec"
  local ssh_options="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  log_info "Deploying $BUILD_BRANCH into staging..."

  execute_or_die "larga -action $deployment_action -branch $BUILD_BRANCH -hostname $subdomain -lifespan 3d -protection off"

  bundle_command="script/delayed_job start"
  execute_or_die "ssh $ssh_options deploy@$subdomain.indinerocorp.com 'sh -l -c \"$remote_command $bundle_command\"'"

  bundle_command="rake ey_deploy:announce_deployment_end[$subdomain]"
  execute_or_die "ssh $ssh_options deploy@$subdomain.indinerocorp.com 'sh -l -c \"$remote_command $bundle_command\"'"

  if [ "$BUILD_TYPE" = "stage" ]; then
    # Added nohup
    remote_command="cd /home/deploy/indinero/current; RAILS_ENV=staging nohup /home/deploy/.rbenv/shims/bundle exec"
    bundle_command="rake ey_deploy:run_outstanding_tasks[$subdomain] &> /dev/null &"
    execute_or_die "ssh $ssh_options deploy@$subdomain.indinerocorp.com 'sh -l -c \"$remote_command $bundle_command\"'"
  fi
}

function die {
  if [ -z "$1" ]; then
    echo "$APP_NAME: (1) Generic error"
  else
    log_error "# $@"
    echo "$APP_NAME: (1) $@"
  fi

  exit 1
}

function die_with_help {
  echo "$APP_NAME $APP_VERSION"
  echo "================"
  echo "Usage: $APP_NAME [options...]"
  echo ""
  echo "Options:"
  echo "  -a|--action STRING"
  echo "\tOperation to perform: add-to, deploy, finish, start (REQUIRED)"
  echo "  -b|--branch STRING"
  echo "\tBranch name; overrides -v|--version"
  echo "  -f|--from STRING"
  echo "\tParent branch (on start; REQUIRED for integration)"
  echo "  -i|--input-file STRING"
  echo "\tList of feature branches to build (REQUIRED except on deploy, finish hotfix and finish release)"
  echo "  -o|--output-file STRING"
  echo "\tOverride the auto-generated filename for the log file"
  echo "  -t|--type STRING"
  echo "\tType of branch to build or deploy: bugfix, feature, hotfix, integration, production, release (REQUIRED)"
  echo "  -v|--version YY.M.D"
  echo "\tVersion number (REQUIRED)"
  echo ""

  die "$@"
}

function die_on_existing_branch {
  if git branch -r | grep -q $1; then
    die "Branch $1 already exists"
  fi
}

function die_on_failed_fetch {
  if ! eval "git fetch origin > /dev/null 2>&1"; then
    die "Unable to fetch from origin"
  fi
}

function die_on_invalid_build_type {
  if [ -z $BUILD_TYPE ]; then
    die_with_help "Type not found"
  elif [ -z $1 ] || ! eval "echo $BUILD_TYPE | grep -E -q -w '$1'"; then
    die_with_help "Cannot $ACTION build $BUILD_TYPE"
  fi
}

function die_on_invalid_branch_or_version {
  local branch_or_version="$BRANCH"

  if [ -z "$branch_or_version" ]; then
    branch_or_version="$VERSION"
  fi

  if ([ "$BUILD_TYPE" = "bugfix" ] || [ "$BUILD_TYPE" = "hotfix" ]) && [[ "$branch_or_version" == *.0 ]]; then
    die "Invalid branch or version $branch_or_version"
  elif [ "$BUILD_TYPE" = "release" ] && [[ "$branch_or_version" != *.0 ]]; then
    die "Invalid branch or version $branch_or_version"
  fi
}

function die_on_invalid_larga {
  if ! eval "type larga > /dev/null 2>&1"; then
    die "Larga not found; download the latest from $INSTALLER_URL_LARGA"
  fi
}

function die_on_invalid_parent_branch {
  if [ -z $FROM ]; then
    die "Parent branch not found"
  elif [ -z $1 ] || ! eval "echo $FROM | grep -E -q -w '$1'"; then
    die "Cannot branch from parent branch $FROM"
  fi
}

function die_on_missing_branch {
  if ! git branch -r | grep -q "origin/$1"; then
    die "Branch $1 does not exist"
  fi
}

function die_on_missing_curl {
  if ! eval "type curl > /dev/null 2>&1"; then
    die "Curl not found! Download the latest from $INSTALLER_URL_CURL"
  fi
}

function die_on_missing_engineyard {
  if ! eval "gem list -i engineyard > /dev/null 2>&1"; then
    die "EngineYard gem not found! Download the latest with 'gem install engineyard'"
  fi
}

function die_on_missing_gem {
  if ! eval "type gem > /dev/null 2>&1"; then
    die "RubyGems not found! Download the latest from $INSTALLER_URL_GEM"
  fi
}

function die_on_missing_git {
  if ! eval "type git > /dev/null 2>&1"; then
    die "Git not found; download the installer from $INSTALLER_URL_GIT"
  fi
}

function die_on_missing_input_branches {
  if [ -z "$INPUT_FILE" ] || [ ! -f "$INPUT_FILE" ]; then
    local timestamp=`date +%y%m%d%H%M%S`
    INPUT_FILE="$timestamp-$ACTION-$BUILD_TYPE.txt"

    echo "" > $INPUT_FILE
    echo "# Please enter the list of input branches." >> $INPUT_FILE
    echo "# Lines starting with '#' will be ignored," >> $INPUT_FILE
    echo "# and an empty message aborts the script." >> $INPUT_FILE

    vim $INPUT_FILE
  fi

  INPUT_BRANCHES=`sed 's/#.*$//' $INPUT_FILE | grep -E -v "^[[:space:]]*$" | awk '{print $1}'`
  if [ -z "$INPUT_BRANCHES" ]; then
    die "Input branch(es) not found"
  fi
}

function die_on_missing_branch_or_version {
  if [ -z "$BRANCH" ] && [ -z "$VERSION" ]; then
    die_with_help "Branch or version not found"
  fi
}

function die_on_missing_vim {
  if [ -z "$INPUT_FILE" ] || [ ! -f "$INPUT_FILE" ]; then
    if ! eval "type vim > /dev/null 2>&1"; then
      die "Vim not found; download the installer from $INSTALLER_URL_VIM"
    fi
  fi
}

function execute {
  log_info $@

  printf "$COLOR_DEBUG" | tee -a $LOG_FILE
  eval $@ 2>&1 | sed -E -e "s,^,[DEBUG] $APP_NAME>    ,g; s,$COLOR_PREFIX\[(39|0)(;0)?m,$COLOR_DEBUG,g" -l | tee -a $LOG_FILE
  return_code=${PIPESTATUS[0]}
  printf "$COLOR_DEFAULT" | tee -a $LOG_FILE
}

function execute_or_die {
  execute $1

  if [ $return_code -ne 0 ]; then
    die "$APP_NAME encountered an error and cannot proceed! (status code: $return_code)"
  fi
}

function initialize_branch_lists {
  MERGED_BRANCHES=()
  UNMERGED_BRANCHES=()
  UNREBASED_BRANCHES=()
}

function initialize_files {
  if [ "$LOG_FILE" = "/dev/null" ]; then
    LOG_FILE="$ACTION-$BUILD_TYPE.log"
  fi
}

function log_error {
  echo "$COLOR_RED[ERROR] $APP_NAME> $@$COLOR_DEFAULT" | tee -a $LOG_FILE
}

function log_info {
  echo "[INFO ] $APP_NAME> $@" | tee -a $LOG_FILE
}

function log_warn {
  echo "$COLOR_RED[WARN ] $APP_NAME> $@$COLOR_DEFAULT" | tee -a $LOG_FILE
}

function merge_or_abort {
  log_info "# Merging $1 to $2"

  if [ -z $3 ] || [ $3 != "skip_checkout" ]; then
    execute_or_die "git checkout $2"
  fi

  execute "git merge --no-edit --no-ff $1"

  if [ $return_code -ne 0 ]; then
    log_warn "# Merge conflict detected for $1"
    execute_or_die "git merge --abort"
    log_info ""

    UNMERGED_BRANCHES+=($1)
    return_code=1
  else
    log_info "# Successfully merged $1 to $2"
    log_info ""

    MERGED_BRANCHES+=($1)
    return_code=0
  fi
}

function parse_cli_arguments {
  local option

  ACTION=""
  BRANCH=""
  BUILD_TYPE=""
  FROM=""
  INPUT_FILE=""
  VERSION=""

  while [[ $# -gt 0 ]]; do
    option="$1"
    shift

    case "$option" in
      -a|--action)
        ACTION="$1"
        ;;
      -b|--branch)
        BRANCH="$1"
        ;;
      -f|--from)
        FROM="$1"
        ;;
      -i|--input-file)
        INPUT_FILE="$1"
        ;;
      -o|--output-file)
        LOG_FILE="$1"
        ;;
      -t|--type)
        BUILD_TYPE="$1"
        ;;
      -v|--version)
        VERSION="$1"
        ;;
      *) # unknown option
        ;;
    esac

    shift
  done
}

function perform_add_to {
  initialize_branch_lists
  log_info "# Adding branch(es) to $BUILD_BRANCH via $APP_NAME $APP_VERSION..."
  execute_or_die "git checkout $BUILD_BRANCH"

  local branch
  for branch in $INPUT_BRANCHES; do
    merge_or_abort $branch $BUILD_BRANCH "skip_checkout"
  done

  if [ ${#MERGED_BRANCHES[@]} -gt 0 ]; then
    execute_or_die "git push origin $BUILD_BRANCH"
  fi

  show_merge_conflicts
  cleanup_branches
}

function perform_deploy {
  local environment
  case "$BUILD_TYPE" in
    develop|release)
      log_info "# Deploying $BUILD_BRANCH on EngineYard staging via $APP_NAME $APP_VERSION..."
      deploy_to_engineyard "$ENVIRONMENT_EY_RELEASE"
      log_info "# Successfully deployed $BUILD_BRANCH on EngineYard staging."
      ;;
    hotfix)
      log_info "# Deploying $BUILD_BRANCH on hotfix Larga via $APP_NAME $APP_VERSION..."
      deploy_to_larga "hotfix" "integration (hotfix)"
      log_info "# Successfully deployed $BUILD_BRANCH on hotfix Larga."
      ;;
    integration)
      case "$FROM" in
        develop)
          log_info "# Deploying $BUILD_BRANCH on integration Larga via $APP_NAME $APP_VERSION..."
          deploy_to_larga "integration" "integration"
          log_info "# Successfully deployed $BUILD_BRANCH on integration Larga."
          ;;
        master)
          log_info "# Deploying $BUILD_BRANCH on hotfix Larga via $APP_NAME $APP_VERSION..."
          deploy_to_larga "hotfix" "integration (hotfix)"
          log_info "# Successfully deployed $BUILD_BRANCH on hotfix Larga."
          ;;
      esac
      ;;
    production)
      log_info "# Deploying $BUILD_BRANCH on EngineYard production via $APP_NAME $APP_VERSION..."
      deploy_to_engineyard "$ENVIRONMENT_EY_PRODUCTION"
      log_info "# Successfully deployed $BUILD_BRANCH on EngineYard production."
      ;;
  esac

  log_info ""
}

function perform_finish {
  initialize_branch_lists
  case "$BUILD_TYPE" in
    bugfix)
      log_info "# Merging bugfix(es) into $BUILD_BRANCH via $APP_NAME $APP_VERSION..."
      ;;
    feature)
      log_info "# Merging feature(s) into $BUILD_BRANCH via $APP_NAME $APP_VERSION..."
      ;;
    hotfix)
      log_info "# Merging $BUILD_BRANCH into master and develop via $APP_NAME $APP_VERSION..."
      ;;
    patch)
      log_info "# Merging patch(es) into $BUILD_BRANCH via $APP_NAME $APP_VERSION..."
      ;;
    release)
      log_info "# Merging $BUILD_BRANCH into master and develop via $APP_NAME $APP_VERSION..."
      ;;
  esac

  case "$BUILD_TYPE" in
    bugfix|feature|patch)
      local branch
      for branch in $INPUT_BRANCHES; do
        rebase_and_merge_or_abort $branch $BUILD_BRANCH
      done

      if [ ${#MERGED_BRANCHES[@]} -gt 0 ]; then
        execute_or_die "git push origin $BUILD_BRANCH"
      fi

      show_rebase_conflicts
      show_merge_conflicts
      ;;
    hotfix)
      # the UPCOMING release date EXCLUDING current date
      local release_branch="release/`date -v +1d -v +Mon -v +7d -v +1m -v 1d -v -14d -v +Mon +%y.%-m`.0"

      merge_or_abort $BUILD_BRANCH "master"
      if [ ${#MERGED_BRANCHES[@]} -eq 1 ]; then
        execute_or_die "git push origin master"

        merge_or_abort $BUILD_BRANCH "develop"
        if [ ${#MERGED_BRANCHES[@]} -eq 2 ]; then
          execute_or_die "git push origin develop"

          log_info "# Successfully merged $BUILD_BRANCH to develop"
          if ! git branch -r | grep -q $release_branch; then
            log_info "# To deploy, use the following command:"
            log_info "#   $APP_NAME -a deploy -t develop"
          fi
          log_info ""
        else
          show_merge_conflict $BUILD_BRANCH "develop"
        fi

        if git branch -r | grep -q $release_branch; then
          local merged_branches_count=${#MERGED_BRANCHES[@]}
          merge_or_abort $BUILD_BRANCH "$release_branch"

          if [ ${#MERGED_BRANCHES[@]} -gt $merged_branches_count ]; then
            execute_or_die "git push origin $release_branch"

            log_info "# Successfully merged $BUILD_BRANCH to $release_branch"
            log_info "# To deploy, use the following command:"
            log_info "#   $APP_NAME -a deploy -t release -b $release_branch"
            log_info ""
          else
            show_merge_conflict $BUILD_BRANCH "$release_branch"
          fi
        fi

        log_info "# Successfully merged $BUILD_BRANCH to master"
        log_info "# To deploy, use the following command:"
        log_info "#   $APP_NAME -a deploy -t production"
        log_info ""
      else
        log_error "${MERGED_BRANCHES[@]:(-1)}"

        show_merge_conflict $BUILD_BRANCH "master"
        show_merge_conflict $BUILD_BRANCH "develop"

        if git branch -r | grep -q $release_branch; then
          show_merge_conflict $BUILD_BRANCH "$release_branch"
        fi
      fi
      ;;
    release)
      merge_or_abort $BUILD_BRANCH "master"
      if [ ${#MERGED_BRANCHES[@]} -eq 1 ]; then
        execute_or_die "git push origin master"

        merge_or_abort $BUILD_BRANCH "develop"
        if [ ${#MERGED_BRANCHES[@]} -eq 2 ]; then
          execute_or_die "git push origin develop"

          log_info "# Successfully merged $BUILD_BRANCH to develop"
          log_info "# To deploy, use the following command:"
          log_info "#   $APP_NAME -a deploy -t develop"
          log_info ""
        else
          show_merge_conflict $BUILD_BRANCH "develop"
        fi

        log_info "# Successfully merged $BUILD_BRANCH to master"
        log_info "# To deploy, use the following command:"
        log_info "#   $APP_NAME -a deploy -t production"
        log_info ""
      else
        show_merge_conflict $BUILD_BRANCH "master"
        show_merge_conflict $BUILD_BRANCH "develop"
      fi
    ;;
  esac

  cleanup_branches
}

function perform_start {
  log_info "# Creating $BUILD_BRANCH via $APP_NAME $APP_VERSION..."

  case "$BUILD_TYPE" in
    hotfix)
      execute_or_die "git checkout master"
      execute_or_die "git checkout -b $BUILD_BRANCH"

      ACTION="finish"
      BUILD_TYPE="bugfix"

      perform_finish
      ;;
    integration)
      execute_or_die "git checkout $FROM"
      execute_or_die "git checkout -b $BUILD_BRANCH"

      ACTION="add-to"
      BUILD_TYPE="integration"

      perform_add_to
      ;;
    release)
      execute_or_die "git checkout develop"
      execute_or_die "git checkout -b $BUILD_BRANCH"
      execute_or_die "git push origin $BUILD_BRANCH"

      log_info "# Successfully created $BUILD_BRANCH from develop."
      ;;
  esac
}

function rebase_and_merge_or_abort {
  log_info "# Rebasing $1 to $2"
  execute "git rebase $2 $1"

  if [ $return_code -eq 0 ]; then
    log_info "# Successfully rebased $1 to $2"
    log_info ""

    execute_or_die "git push --force-with-lease origin $1"
    merge_or_abort $1 $2
  else
    log_warn "# Rebase conflict detected for $1"
    execute_or_die "git rebase --abort"
    log_info ""
    execute "git log"

    UNREBASED_BRANCHES+=($1)
  fi
}

function send_larga_deploy_message {
  local channel="\"channel\":\"$1\""
  shift

  local icon="\"icon_emoji\":\":engineyard:\""
  local text="\"text\":\"$@\""
  local user="\"username\":\"ey-deploy\""

  curl -X POST -d payload="{$channel,$icon,$text,$user}" $SLACK_WEBHOOK
}

function show_merge_conflict {
  log_warn "# The branch $1 has NOT been merged to $2:"
  log_warn "# To fix this manually, use the following commands after fixing the merge conflict(s):"
  log_warn "#   git checkout $2"
  log_warn "#   git merge --no-edit --no-ff $1"
  log_warn ""
}

function show_merge_conflicts {
  local branch
  if [ ${#UNMERGED_BRANCHES[@]} -gt 0 ]; then
    log_warn "# The following branch(es) have NOT been merged to $BUILD_BRANCH:"
    for branch in ${UNMERGED_BRANCHES[@]}; do
      log_warn "#   $branch"
    done
    log_warn ""

    if [ "$1" != "skip_error_message" ]; then
      log_warn "To add these branches, use the following command after fixing the merge conflict(s):"
      log_warn "  $APP_NAME -a $ACTION -t $BUILD_TYPE $BUILD_BRANCH"
      log_warn ""
    fi
  fi
}

function show_rebase_conflicts {
  local branch
  if [ ${#UNREBASED_BRANCHES[@]} -gt 0 ]; then
    log_warn "# The following branches have NOT been rebased to $BUILD_BRANCH:"
    for branch in ${UNREBASED_BRANCHES[@]}; do
      log_warn "#   $branch"
    done
    log_warn ""

    log_warn "To add these branches, use the following command after fixing the rebase conflict(s):"
    log_warn "  $APP_NAME -a $ACTION -t $BUILD_TYPE -b $BUILD_BRANCH"
    log_warn ""
  fi
}

function validate_build_branch {
  BUILD_BRANCH="$BRANCH"

  if [ -z $BUILD_BRANCH ]; then
    autogenerate_build_branch
  fi

  case "$ACTION" in
    add-to|deploy|finish)
      die_on_missing_branch $BUILD_BRANCH
      ;;
    start)
      die_on_existing_branch $BUILD_BRANCH
      ;;
  esac
}

function validate_cli_arguments {
  if [ -z "$ACTION" ]; then
    die_with_help "Action not found"
  fi

  case "$ACTION" in
    add-to)
      die_on_invalid_build_type "integration"
      die_on_missing_branch_or_version
      ;;
    deploy)
      case "$BUILD_TYPE" in
        develop)
          BRANCH="develop"
          ;;
        hotfix)
          die_on_missing_branch_or_version
          die_on_invalid_branch_or_version
          ;;
        integration)
          die_on_invalid_parent_branch "develop|master"
          die_on_missing_branch_or_version
          ;;
        production)
          BRANCH="master"
          ;;
        release)
          if [ -n "$BRANCH" ] || [ -n "$VERSION" ]; then
            die_on_invalid_branch_or_version
          fi
          ;;
        *)
          die_on_invalid_build_type ""
          ;;
      esac
      ;;
    finish)
      die_on_invalid_build_type "bugfix|feature|hotfix|patch|release"
      if [ "$BUILD_TYPE" != "feature" ]; then
        die_on_missing_branch_or_version
        die_on_invalid_branch_or_version
      fi
      ;;
    start)
      die_on_invalid_build_type "hotfix|integration|release"

      case "$BUILD_TYPE" in
        hotfix)
          die_on_missing_branch_or_version
          die_on_invalid_branch_or_version
          ;;
        integration)
          die_on_invalid_parent_branch "develop|master"
          ;;
        release)
          if [ -n "$BRANCH" ] || [ -n "$VERSION" ]; then
            die_on_invalid_branch_or_version
          fi
          ;;
      esac
      ;;
    *)
      die_with_help "Invalid action $ACTION"
      ;;
  esac
}

function validate_dependencies {
  die_on_missing_git

  case "$ACTION" in
    add-to|start)
      die_on_missing_vim
      ;;
    deploy)
      case "$BUILD_TYPE" in
        develop|production|release)
          die_on_missing_gem
          die_on_missing_engineyard
          ;;
        hotfix)
          die_on_invalid_larga
          die_on_missing_curl
          ;;
        integration)
          case "$FROM" in
            develop)
              die_on_invalid_larga
              die_on_missing_curl
              ;;
            master)
              die_on_missing_gem
              die_on_missing_engineyard
              ;;
          esac
          ;;
      esac
      ;;
    finish)
      case "$BUILD_TYPE" in
        bugfix|feature|patch)
          die_on_missing_vim
          ;;
      esac
      ;;
  esac
}

function validate_input_branches {
  die_on_failed_fetch

  case "$ACTION" in
    add-to)
      die_on_missing_input_branches
      die_on_failed_fetch
      ;;
    finish)
      case "$BUILD_TYPE" in
        bugfix|feature|patch)
          die_on_missing_input_branches
          die_on_failed_fetch
          ;;
      esac
      ;;
    start)
      case "$BUILD_TYPE" in
        hotfix|integration|patch)
          die_on_missing_input_branches
          die_on_failed_fetch
          ;;
      esac
      ;;
  esac

  for branch in $INPUT_BRANCHES; do
    die_on_missing_branch $branch
  done
}

parse_cli_arguments $@
validate_cli_arguments
validate_dependencies
validate_input_branches
validate_build_branch

checkout_branches
initialize_files # actual logging starts here

case "$ACTION" in
  add-to)
    perform_add_to
    ;;
  deploy)
    perform_deploy
    ;;
  finish)
    perform_finish
    ;;
  start)
    perform_start
    ;;
esac

random=$(( $RANDOM % 3 ))
if [ $random -eq 1 ]; then
  log_info "# All done! May the odds be ever in your favor!"
elif [ $random -eq 2 ]; then
  log_info "# All done! May the force be with you!"
else
  log_info "# All done! Good luck, soldier!"
fi
