#!/bin/sh

APP_NAME="git-build"
APP_VERSION="v1.0.1"
INSTALLER_URL_CURL="https://curl.haxx.se/download.html"
INSTALLER_URL_GIT="https://git-scm.com/downloads/"
INSTALLER_URL_GEM="https://rubygems.org/pages/download/"
INSTALLER_URL_LARGA="http://172.30.50.113/larga"
INSTALLER_URL_VI="http://www.vim.org/download.php"
LOG_FILE="/dev/null"
SLACK_WEBHOOK="https://hooks.slack.com/services/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"

function deploy {
  if [ -z "$ENVIRONMENT" ]; then
    die "Cannot deploy: deployment environment not found!"
  elif [ "$ENVIRONMENT" = "integration" ]; then
    local subdomain="integration"
    local endpoint="$subdomain.indinerocorp.com"

    send_larga_deploy_message "#builds" "<!channel> Deployment to <https://$endpoint|integration> started..."

    PREVIOUS_BRANCH=`larga -action show -branch placeholder | grep https://$endpoint | awk '{print $1}'`

    local deployment_action="build"

    if [ -n "$PREVIOUS_BRANCH" ]; then
      if [ "$PREVIOUS_BRANCH" = "$BUILD_BRANCH" ]; then
        deployment_action="deploy"
      else
        log_info "Destroying current staging instance $PREVIOUS_BRANCH..."
        execute_or_die "larga -action destroy -branch $PREVIOUS_BRANCH"
      fi
    fi

    local bundle_command

    local remote_command="cd /home/deploy/indinero/current; RAILS_ENV=staging /home/deploy/.rbenv/shims/bundle exec"
    local ssh_options="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    log_info "Deploying $BUILD_BRANCH into staging..."

    if [ "$BRANCH_TYPE" = "hotfix" ]; then
      execute_or_die "larga -action $deployment_action -branch $BUILD_BRANCH"
    elif [ "$BRANCH_TYPE" = "stage" ]; then
      execute_or_die "larga -action $deployment_action -branch $BUILD_BRANCH -hostname $subdomain -lifespan 3d"
    else
      die "Cannot deploy: unknown branch type $BRANCH_TYPE"
    fi

    bundle_command="script/delayed_job start"
    execute_or_die "ssh $ssh_options deploy@$subdomain.indinerocorp.com 'sh -l -c \"$remote_command $bundle_command\"'"

    bundle_command="rake ey_deploy:announce_deployment_end[integration]"
    execute_or_die "ssh $ssh_options deploy@$subdomain.indinerocorp.com 'sh -l -c \"$remote_command $bundle_command\"'"

    if [ "$BRANCH_TYPE" = "stage" ]; then
      # Added nohup
      remote_command="cd /home/deploy/indinero/current; RAILS_ENV=staging nohup /home/deploy/.rbenv/shims/bundle exec"
      bundle_command="rake ey_deploy:run_outstanding_tasks[integration] &>/dev/null &"
      execute_or_die "ssh $ssh_options deploy@$subdomain.indinerocorp.com 'sh -l -c \"$remote_command $bundle_command\"'"
    fi
  elif [ "$ENVIRONMENT" = "production" ]; then
    if [ "$BRANCH_TYPE" = "hotfix" ] || [ "$BRANCH_TYPE" = "release" ]; then
      execute_or_die "ey login"

      execute_or_die "git checkout develop"
      execute_or_die "git merge --no-edit --no-ff $BUILD_BRANCH"
      execute_or_die "git push origin develop"

      execute_or_die "git checkout master"
      execute_or_die "git merge --no-edit --no-ff $BUILD_BRANCH"
      execute_or_die "git push origin master"

      if [ "$BRANCH_TYPE" = "release" ]; then
        execute_or_die "git tag $VERSION"
        execute_or_die "git push origin $VERSION"
      fi

      execute_or_die "ey deploy -e indinero3_production -m 'rake db:migrate' -r master"
    else
      die "Cannot deploy: unknown branch type $BRANCH_TYPE"
    fi
  elif [ "$ENVIRONMENT" = "staging" ]; then
    if [ "$BRANCH_TYPE" = "release" ]; then
      execute_or_die "ey login"
      execute_or_die "ey deploy -e staging_v3 -m 'rake db:migrate' -r $BUILD_BRANCH"
    else
      die "Cannot deploy: unknown branch type $BRANCH_TYPE"
    fi
  else
    die "Cannot deploy: unknown deployment environment $ENVIRONMENT"
  fi
}

function die {
  if [ -z "$1" ]; then
    echo "$APP_NAME $APP_VERSION"
    echo "================"
    echo "Usage: git-build [-a|--action <create|append>] [-t|--type <hotfix|release|stage>] [-f|--flag <flag>] [-v|--version <version>]"
    echo ""
    echo "  -a|--action string"
    echo "\tOperation to perform: append, create, deploy (REQUIRED)"
    echo "  -e|--environment string"
    echo "\tDestination environment: integration, production, staging (on deploy; REQUIRED for hotfix and release)"
    echo "  -f|--flag integer"
    echo "\tIncrementing flag (non-zero REQUIRED for hotfix, default: 0)"
    echo "  -i|--input-file string"
    echo "\tList of feature branches to build (optional; ignored on deploy)"
    echo "  -t|--type string"
    echo "\tType of branch to build: hotfix, release, stage (REQUIRED)"
    echo "  -v|--version yy.m.d"
    echo "\tOptional, version number (default: current date for hotfix and stage, next Monday for release)"
    echo ""
  else
    log_error $@
  fi

  exit 1
}

function execute {
  log_info $@

  raw_output=$(eval $@ 2>&1)
  return_code=$?

  while read -r line_output; do
    log_debug $line_output
  done <<< "$raw_output"
}

function execute_or_die {
  execute $1

  if [ $return_code -ne 0 ]; then
    if [ $# -eq 1 ]; then
      die "git-build encountered an error and cannot proceed! (status code: $?)"
    fi

    shift
    die $@
  fi
}

function initialize_files {
  CLEANUP_FILE="cleanup-$BRANCH_TYPE-$VERSION.sh"
  >> $CLEANUP_FILE # Create the cleanup file, if it does not yet exist
  chmod +x $CLEANUP_FILE

  LOG_FILE="$BRANCH_TYPE-$VERSION.log"
  if [ $ACTION = "append" ]; then
    echo "" > $LOG_FILE # Insert a blank line, to separate log entries per "session"

    local action="Appending to"
  elif [ $ACTION = "create" ]; then
    > $LOG_FILE # Create a blank log file

    local action="Creating"
  fi

  log_info "# $action $BUILD_BRANCH via $APP_NAME $APP_VERSION"
}

function initialize_local_branches {
  log_info "# Cleaning / setting up local branches"

  if [ $ACTION = "append" ]; then
    execute_or_die "git checkout develop"

    execute "git branch -D $BUILD_BRANCH"
    execute_or_die "git checkout $BUILD_BRANCH"
  elif [ $ACTION = "create" ]; then
    if [ "$BRANCH_TYPE" = "hotfix" ]; then
      execute_or_die "git checkout develop"

      execute "git branch -D master"
      execute_or_die "git checkout master"

      execute_or_die "git checkout -b $BUILD_BRANCH"
    else
      execute_or_die "git checkout master"

      execute "git branch -D develop"
      execute_or_die "git checkout develop"

      execute_or_die "git checkout -b $BUILD_BRANCH"
    fi
  elif [ $ACTION = "deploy" ]; then
    execute_or_die "git checkout master"

    execute "git branch -D develop"
    execute_or_die "git checkout develop"

    execute "git branch -D $BUILD_BRANCH"
    execute_or_die "git checkout $BUILD_BRANCH"

    execute "git branch -D master"
    execute_or_die "git checkout master"
  fi

  if [ ${#FEATURE_BRANCHES[@]} -ne 0 ]; then
    for branch in $FEATURE_BRANCHES; do
      execute "git branch -D $branch"
      execute_or_die "git checkout $branch"
    done
  fi
}

function log_cleanup {
  echo $@ >> $CLEANUP_FILE
}

function log_debug {
  echo "\x1B[90m[DEBUG] git-build>    $@\x1B[39m" | tee -a $LOG_FILE
}

function log_error {
  echo "\x1B[31m[ERROR] git-build> $@\x1B[39m" | tee -a $LOG_FILE
}

function log_info {
  echo "[INFO ] git-build> $@" | tee -a $LOG_FILE
}

function log_warn {
  echo "\x1B[31m[WARN ] git-build> $@\x1B[39m" | tee -a $LOG_FILE
}

function merge_or_abort {
  log_info "# Merging $1 to $2"
  execute_or_die "git checkout $2"
  execute "git merge --no-edit --no-ff $1"

  if [ $return_code -ne 0 ]; then
    log_warn "# Merge conflict detected for $1"
    execute_or_die "git merge --abort"
    log_info ""

    UNMERGED_BRANCHES+=($1)
    merge_success=false
  else
    log_info "# Successfully merged $1 to $2"
    log_info ""

    MERGED_BRANCHES+=($1)
    merge_success=true
  fi
}

function parse_cli_arguments {
  ACTION=""
  BRANCH_TYPE=""
  ENVIRONMENT=""
  FLAG=0
  INPUT_FILE=""
  VERSION=""

  while [[ $# -gt 0 ]]
  do
    key="$1"

    case $key in
      -a|--action)
        if [ -z $ACTION ]; then
          ACTION="$2"
        else
          ACTION=""
        fi

        if [ $ACTION != "append" ] && [ $ACTION != "create" ] && [ $ACTION != "deploy" ]; then
          die
        fi

        shift
        ;;
      -t|--type)
        if [ -z $BRANCH_TYPE ]; then
          BRANCH_TYPE="$2"
        else
          BRANCH_TYPE=""
        fi

        if [ "$BRANCH_TYPE" != "hotfix" ] && [ "$BRANCH_TYPE" != "release" ] && [ "$BRANCH_TYPE" != "stage" ]; then
          die
        fi

        shift
        ;;
      -e|--environment)
        if [ -z $ENVIRONMENT ]; then
          ENVIRONMENT="$2"
        else
          ENVIRONMENT=""
        fi

        if [ $ENVIRONMENT != "integration" ] && [ $ENVIRONMENT != "production" ] && [ $ENVIRONMENT != "staging" ]; then
          die
        fi

        shift
        ;;
      -f|--flag)
        if [ $FLAG -eq 0 ]; then
          FLAG="$2"
        else
          FLAG=""
        fi

        if [ -z $FLAG ]; then
          die
        fi

        shift
        ;;
      -i|--input-file)
        if [ -z $INPUT_FILE ]; then
          INPUT_FILE="$2"
        else
          INPUT_FILE=""
        fi

        if [ -z $INPUT_FILE ]; then
          die
        fi

        shift
        ;;
      -v|--version)
        if [ -z $VERSION ]; then
          VERSION="$2"
        else
          VERSION=""
        fi

        if [ -z $VERSION ]; then
          die
        fi

        shift
        ;;
      *)
        # unknown option
        ;;
    esac

    shift
  done

  if [ -z $ACTION ] || [ -z $BRANCH_TYPE ]; then
    die
  elif [ "$ACTION" = "deploy" ]; then
    # On blank ENVIRONMENT, default to integration if BRANCH_TYPE=stage
    if [ -z "$ENVIRONMENT" ]; then
      if [ "$BRANCH_TYPE" = "stage" ]; then
        ENVIRONMENT="integration"
      else
        die
      fi
    fi

    if [ "$BRANCH_TYPE" = "hotfix" ] && [ "$ENVIRONMENT" != "integration" ] && [ "$ENVIRONMENT" != "production" ] ; then
      die
    elif [ "$BRANCH_TYPE" = "release" ] && [ "$ENVIRONMENT" != "production" ] && [ "$ENVIRONMENT" != "staging" ]; then
      die
    elif [ "$BRANCH_TYPE" = "stage" ] && [ "$ENVIRONMENT" != "integration" ]; then
      die
    fi
  fi

  # If not provided, auto-generate VERSION based on ACTION and BRANCH
  if [ -z $VERSION ]; then
    if [ "$BRANCH_TYPE" = "stage" ]; then
      # Use current date
      VERSION=`date +%y.%-m.%-d`
    elif [ "$ACTION" != "deploy" ] && [ "$BRANCH_TYPE" = "release" ]; then
      # Use next Monday, except if run on Monday before 12PM, in which case, use current Monday
      local year_and_month=`date -v +12H -v +Mon +%y.%-m`
      local week_of_month=$((($(date -v +12H -v +Mon +%-d)-1)/7+1))

      VERSION="$year_and_month.$week_of_month"
    else
      # Use previous Monday, except if run on Monday after 12PM Monday, in which case, use current Monday
      local year_and_month=`date -v +12H -v -Mon +%y.%-m`
      local week_of_month=$((($(date -v +12H -v -Mon +%-d)-1)/7+1))

      VERSION="$year_and_month.$week_of_month"
    fi
  fi

  # always ignore flag for release branches
  if [ "$BRANCH_TYPE" != "release" ]; then
    if [ $FLAG -ne 0 ]; then
      VERSION="$VERSION.$FLAG"
    elif [ "$BRANCH_TYPE" = "hotfix" ]; then
      die # non-zero FLAG is required if BRANCH = hotfix
    fi
  fi

  BUILD_BRANCH="$BRANCH_TYPE/$VERSION"
}

function parse_feature_branches {
  # Get input file, if applicable; generate one, otherwise.
  if [ -z $INPUT_FILE]; then
    INPUT_FILE="feature-branches-$BRANCH_TYPE-$VERSION.txt"
    echo "" > $INPUT_FILE
    echo "# Please enter the list of feature branches to be deployed." >> $INPUT_FILE
    echo "# Lines starting with '#' will be ignored, and an empty message aborts the script." >> $INPUT_FILE
    vim $INPUT_FILE

    log_cleanup "rm -f $INPUT_FILE"
  fi

  FEATURE_BRANCHES=`sed 's/#.*$//' $INPUT_FILE | grep -E -v "^[[:space:]]*$" | awk '{print $1}'`
  if [ ${#FEATURE_BRANCHES[@]} -eq 0 ]; then
    die "No feature branches found!"
  fi
}

function rebase_and_merge_or_abort {
  log_info "# Rebasing $1 to $2"
  execute_or_die "git checkout $1"
  execute "git rebase $2"

  if [ $return_code -ne 0 ]; then
    log_warn "# Rebase conflict detected for $1"
    execute_or_die "git rebase --abort"
    log_info ""

    UNREBASED_BRANCHES+=($1)
  else
    log_info "# Successfully rebased $1 to $2"
    log_info ""

    merge_or_abort $1 $2

    if [ "$merge_success" = true ]; then
      execute_or_die "git push --force-with-lease origin $1"
    fi
  fi
}

function send_larga_deploy_message {
  local channel="\"channel\":\"$1\""
  shift

  local icon="\"icon_emoji\":\":engineyard:\""
  local text="\"text\":\"$@\""
  local user="\"username\":\"ey-deploy\""

  curl -X POST -d payload="{$channel,$icon,$text,$user}" $SLACK_WEBHOOK
}

function show_cleanup {
  local branch random=$(( $RANDOM % 3 ))

  log_cleanup "git checkout develop"

  for branch in $FEATURE_BRANCHES; do
    log_cleanup "git branch -D $branch"
  done

  log_cleanup "git branch -D $BUILD_BRANCH"
  log_cleanup "rm $CLEANUP_FILE"

  log_info "# Undo or cleanup this build with the following command:"
  log_info "#   ./$CLEANUP_FILE"
  log_info ""

  if [ $random -eq 1 ]; then
    log_info "# May the odds be ever in your favor!"
  elif [ $random -eq 2 ]; then
    log_info "# May the force be with you!"
  else
    log_info "# Good luck, soldier!"
  fi
}

function show_merge_conflicts {
  local branch
  if [ ${#UNMERGED_BRANCHES[@]} -gt 0 ]; then
    log_warn "# The following branches have NOT been merged to $BUILD_BRANCH:"
    for branch in ${UNMERGED_BRANCHES[@]}; do
      log_warn "#   $branch"
    done
    log_warn "# To add these branches, use the '-a append' option after fixing the merge conflict(s)."
    log_warn ""
  fi
}

function show_rebase_conflicts {
  local branch
  if [ ${#UNREBASED_BRANCHES[@]} -gt 0 ]; then
    log_warn "# The following branches have NOT been rebased to $BUILD_BRANCH:"
    for branch in ${UNREBASED_BRANCHES[@]}; do
      log_warn "#   $branch"
    done
    log_warn ""
    log_warn "# To add these branches, use the '-a append' option after fixing the rebase conflict(s)."
    log_warn ""
  fi
}

function validate_dependencies {
  local error_message
  log_info "Validating dependencies..."

  error_message="Git not found! Download the installer from $INSTALLER_URL_GIT"
  execute_or_die "type git" $error_message

  error_message="Vim not found! Download the installer from $INSTALLER_URL_VI"
  execute_or_die "type vim" $error_message

  if [ "$ACTION" = "deploy" ]; then
    if [ "$ENVIRONMENT" = "integration" ]; then
      error_message="Larga not found! Download the latest from $INSTALLER_URL_LARGA"
      execute_or_die "type larga" $error_message

      execute "larga -action show -branch placeholder | grep -q 'DEPRECATION NOTICE'"
      if [ $return_code -eq 0 ]; then
        die "Larga is outdated! Download the latest from $INSTALLER_URL_LARGA"
      fi

      error_message="Curl not found! Download the latest from $INSTALLER_URL_CURL"
      execute_or_die "type curl" $error_message
    else
      error_message="RubyGems not found! Download the latest from $INSTALLER_URL_GEM"
      execute_or_die "type gem" $error_message

      error_message="EngineYard gem not found! Download the latest with 'gem install engineyard'"
      execute_or_die "gem list -i engineyard" $error_message
    fi
  fi
}

parse_cli_arguments $@
validate_dependencies
initialize_files # actual logging starts here

execute_or_die "git fetch origin"
if git branch -r | grep -q $BUILD_BRANCH; then
  if [ $ACTION = "create" ]; then
    die "Cannot create already-existing branch: $BUILD_BRANCH"
  fi
elif [ $ACTION = "append" ]; then
  die "Cannot append to non-existent branch: $BUILD_BRANCH"
elif [ $ACTION = "deploy" ]; then
  die "Cannot deploy non-existent branch: $BUILD_BRANCH"
fi

if [ $ACTION != "deploy" ]; then
  parse_feature_branches $@
fi

initialize_local_branches

if [ $ACTION = "deploy" ]; then
  deploy
else
  MERGED_BRANCHES=()
  UNMERGED_BRANCHES=()
  UNREBASED_BRANCHES=()

  if [ "$BRANCH_TYPE" = "stage" ]; then
    for branch in $FEATURE_BRANCHES; do
      merge_or_abort $branch $BUILD_BRANCH
    done
  else
    for branch in $FEATURE_BRANCHES; do
      rebase_and_merge_or_abort $branch $BUILD_BRANCH
    done
  fi

  execute_or_die "git push origin $BUILD_BRANCH"

  show_rebase_conflicts
  show_merge_conflicts
  show_cleanup
fi